/*
 * Copyright 2008-2017 Katherine Flavel
 *
 * See LICENCE for the full copyright terms.
 */

/*
 * Regular expressions, as evaluated by PCRE, which supports the
 * patterns listed at:
 *     http://pcre.org/current/doc/html/pcre2pattern.html
 *
 * Note that not all PCRE regex extensions are supported yet.
 * For unsupported extensions, our intension is to explicitly
 * return an 'unsupported' error, rather than treating the
 * unrecognized syntax incorrectly.
 */

%types%

	pos;
	char;
	unsigned;
	!pred;
	re_flags;
	!err;
	ast_expr;
	ast_class_id;
	ast_count;
	endpoint;

%terminals%

	ANY;
	!MANY;
	OPT;
	PLUS;
	ALT;
	SEP;
	STAR;

	START;
	END;

	OPENSUB; OPENCAPTURE; CLOSE;
	OPENGROUP: () -> (:pos, :pos); CLOSEGROUP: () -> (:char, :pos, :pos);
	OPENGROUPINV: () -> (:pos, :pos);
	OPENGROUPCB: () -> (:pos, :pos);
	OPENGROUPINVCB: () -> (:pos, :pos);
	OPENCOUNT: () -> (:pos, :pos); CLOSECOUNT: () -> (:pos, :pos);

	INVERT: () -> (:char);
	RANGE:  () -> (:char, :pos, :pos);

	NAMED_CLASS: () -> (:ast_class_id, :pos, :pos);

	OPENFLAGS;
	CLOSEFLAGS;
	NEGATE;
	FLAG_UNKNOWN;
	FLAG_INSENSITIVE: () -> (:re_flags);

	ESC:     () -> (:char, :pos, :pos);
	NOESC:  () -> (:char, :pos, :pos);
	CONTROL: () -> (:char, :pos, :pos);
	OCT:     () -> (:char, :pos, :pos);
	HEX:     () -> (:char, :pos, :pos);
	CHAR:    () -> (:char, :pos, :pos);
	COUNT:   () -> (:unsigned);

	UNSUPPORTED: () -> (:char, :pos, :pos);

	EOF;
	!ERROR;

%productions%

	<re-flag-none>:  ()                     -> (:re_flags);
	<re-flag-union>: (:re_flags, :re_flags) -> (:re_flags);

	<count-unbounded>:    () -> (:unsigned);
	<count-zero-or-more>: () -> (:ast_count);
	<count-one-or-more>:  () -> (:ast_count);
	<count-zero-or-one>:  () -> (:ast_count);
	<count-one>:          () -> (:ast_count);
	<count-range>: (:unsigned, :pos, :unsigned, :pos) -> (:ast_count);

	<make-literal-cbrak>:   ()                        -> (:char);

	<ast-range-endpoint-literal>: (:char)         -> (:endpoint);
	<ast-range-endpoint-class>:   (:ast_class_id) -> (:endpoint);
	!<ast-range-distinct>: (:endpoint, :pos, :endpoint, :pos) -> ();

	<ast-make-empty>:        ()                       -> (:ast_expr);
	<ast-make-literal>:      (:char)                  -> (:ast_expr);
	<ast-make-concat>:       ()                       -> (:ast_expr);
	<ast-make-alt>:          ()                       -> (:ast_expr);
	<ast-make-piece>:        (:ast_expr, :ast_count)  -> (:ast_expr);
	<ast-make-group>:        (:ast_expr)              -> (:ast_expr);
	<ast-get-re-flags>:      ()                       -> (:re_flags);
	<ast-set-re-flags>:      (:re_flags)              -> ();
	<ast-mask-re-flags>:     (:re_flags, :re_flags)   -> ();
	<ast-make-anchor-start>: ()                       -> (:ast_expr);
	<ast-make-anchor-end>:   ()                       -> (:ast_expr);
	!<ast-make-subtract>:    (:ast_expr, :ast_expr)   -> (:ast_expr); 
	<ast-make-invert>:       (:ast_expr)              -> (:ast_expr); 
	<ast-make-range>:        (:endpoint, :pos, :endpoint, :pos) -> (:ast_expr);
	<ast-make-named>:        (:ast_class_id)          -> (:ast_expr);

	<ast-add-concat>: (:ast_expr, :ast_expr) -> ();
	<ast-add-alt>:    (:ast_expr, :ast_expr) -> ();

	<err-expected-term>;
	<err-expected-count>;
	<err-expected-atom>;
	<err-expected-alts>;
	<err-expected-range>;
	<err-expected-closegroup>;
	!<err-expected-groupbody>;
	<err-unknown-flag>;
	<err-expected-closeflags>;
	<err-expected-eof>;
	<err-unsupported>;

	<mark-group>: (:pos, :pos) -> ();
	<mark-range>: (:pos, :pos) -> ();
	<mark-count>: (:pos, :pos) -> ();
	<mark-expr>: (:ast_expr, :pos, :pos) -> ();

	<class-any>: () -> (:ast_class_id);

	expr: () -> (node :ast_expr) [
		literal: () -> (node :ast_expr) = {
			{
				(c, !, !) = ESC;
			||
				(c, !, !) = NOESC;
			||
				(c, !, !) = OCT;
			||
				(c, !, !) = HEX;
			||
				(c, !, !) = CHAR;
			||
				(c, !, !) = CONTROL;
			||
				(c, !, !) = UNSUPPORTED;
				<err-unsupported>;
			};
			node = <ast-make-literal>(c);
		};
		    
		character-class: () -> (node :ast_expr) [

			class-head: (class :ast_expr &) -> () = {
				! = INVERT;
				&class = <ast-make-invert>(class);
			||
				$;
			};

			class-literal: () -> (node :ast_expr) = {
				{
					(c, !, !) = ESC;
				||
					(c, !, !) = NOESC;
				||
					(c, !, !) = OCT;
				||
					(c, !, !) = HEX;
				||
					(c, !, !) = CHAR;
				||
					(c, !, !) = CONTROL;
					/* TODO: just construct the AST here;
					 * complain about unsupported things at a later stage */
					<err-unsupported>;
				};

				node = <ast-make-literal>(c);
	  		};

			::class-named: () -> (node :ast_expr, start :pos, end :pos) = {
				(id, start, end) = NAMED_CLASS;
				node = <ast-make-named>(id);
			};

			range-endpoint: () -> (r :endpoint, start :pos, end :pos) [
				range-endpoint-literal: () -> (r :endpoint, start :pos, end :pos) = {
					{
						(c, start, end) = ESC;
					||
						(c, start, end) = OCT;
					||
						(c, start, end) = HEX;
					||
						(c, start, end) = CHAR;
					||
						(c, start, end) = CONTROL;
						<err-unsupported>;
					};
					r = <ast-range-endpoint-literal>(c);
				};

				range-endpoint-class: () -> (r :endpoint, start :pos, end :pos) = {
					(id, start, end) = NAMED_CLASS;
					r = <ast-range-endpoint-class>(id);
				};
			] = {
				{
					(r, start, end) = range-endpoint-literal;
				||
					(r, start, end) = range-endpoint-class;
				};
			};

			range-endpoint-end: () -> (r :endpoint, end :pos) = {
				{
					(r, !, end) = range-endpoint;
				||
					/* allow literal '-' as end of range */
					(c, !, end) = RANGE;
					r = <ast-range-endpoint-literal>(c);
				};
			};

			class-range: () -> (node :ast_expr) = {
				(lower, start, !) = range-endpoint;

				{
					(!, !, !) = RANGE;
				##
					<err-expected-range>;
				};

				(upper, end) = range-endpoint-end;

				<mark-range>(start, end);
				node = <ast-make-range>(lower, start, upper, end);
			};

			class-term: () -> (node :ast_expr) = {
				node = class-literal;
			||
				node = class-range;
			||
				(node, !, !) = class-named;
			};

			list-of-class-terms: (class :ast_expr) -> () = {
				{
					node = class-term;
					<ast-add-alt>(class, node);
				##
					<err-expected-term>;
				};

				{
					list-of-class-terms(class);
				||
					$;
				};
			};

		] = {
			{
				(start, !) = OPENGROUP;

				node = <ast-make-alt>;
				tmp = node;

				class-head(&node);

				{
					(c, rstart, !) = RANGE;

					{
						lower = <ast-range-endpoint-literal>(c);
						(!, !, !) = RANGE;
						(upper,end) = range-endpoint-end;
						node1 = <ast-make-range>(lower, rstart, upper, end);
					||
						node1 = <ast-make-literal>(c);
					};

					<ast-add-alt>(tmp,node1);

					{
						list-of-class-terms(tmp);
					||
						$;
					};
				||
					list-of-class-terms(tmp);
				};
			||
				(start, !) = OPENGROUPINV;

				node = <ast-make-alt>;
				tmp  = node;

				&node = <ast-make-invert>(node);

				{
					(c, rstart, !) = RANGE;

					{
						lower = <ast-range-endpoint-literal>(c);
						(!, !, !) = RANGE;
						(upper, end) = range-endpoint-end;
						node1 = <ast-make-range>(lower, rstart, upper, end);
					||
						node1 = <ast-make-literal>(c);
					};

					<ast-add-alt>(tmp,node1);

					{
						list-of-class-terms(tmp);
					||
						$;
					};

				||
					list-of-class-terms(tmp);
				};

			||
				(start, !) = OPENGROUPCB;

				node = <ast-make-alt>;
				tmp  = node;

				cbrak = <make-literal-cbrak>;
				{
					r = <ast-range-endpoint-literal>(cbrak);
					(!, !, !) = RANGE;
					(upper, end) = range-endpoint-end;
					/* FIXME: start is off by one */
					lower = <ast-range-endpoint-literal>(cbrak);
					node1 = <ast-make-range>(lower, start, upper, end);
				||
					node1 = <ast-make-literal>(cbrak);
				};

				<ast-add-alt>(tmp, node1);

				/* ']' literal or range is already one class
 				 * term, so another isn't necessary */
				{
					list-of-class-terms(tmp);
				||
					$;
				};
			||
				(start, !) = OPENGROUPINVCB;

				node = <ast-make-alt>;
				tmp  = node;

				&node = <ast-make-invert>(node);

				cbrak = <make-literal-cbrak>;
				{
					r = <ast-range-endpoint-literal>(cbrak);
					(!, !, !) = RANGE;
					(upper, end) = range-endpoint-end;
					/* FIXME: start is off by one */
					lower = <ast-range-endpoint-literal>(cbrak);
					node1 = <ast-make-range>(lower, start, upper, end);
				||
					node1 = <ast-make-literal>(cbrak);
				};

				<ast-add-alt>(tmp, node1);

				/* ']' literal or range is already one class
 				 * term, so another isn't necessary */
				{
					list-of-class-terms(tmp);
				||
					$;
				};
			};

			{
				(!, !, end) = CLOSEGROUP;
				<mark-group>(start, end);
			##
				<err-expected-closegroup>;
				end = start; /* appease sid */
			};

			<mark-expr>(tmp, start, end);
		};

		type: () -> (node :ast_expr) = {
			(class, start, end) = class-named;

			node = <ast-make-alt>;
			<ast-add-alt>(node, class);

			<mark-expr>(node, start, end);
		};

		flags: () -> (node :ast_expr) [
			flag_set: (i :re_flags) -> (o :re_flags) = {
				c = FLAG_INSENSITIVE;
				o = <re-flag-union>(i, c);
			||
				FLAG_UNKNOWN;
				o = i;
				<err-unknown-flag>;
			};
		] = {
			OPENFLAGS;

			empty_pos = <re-flag-none>;
			empty_neg = <re-flag-none>;

			{
				pos = flag_set(empty_pos);
			||
				pos = empty_pos;
			};

			{
				NEGATE;
				neg = flag_set(empty_neg);
			||
				neg = empty_neg;
			};

			{
				CLOSEFLAGS;
				<ast-mask-re-flags>(pos, neg);
			##
				<err-expected-closeflags>;
			};
			node = <ast-make-empty>;
		};

		piece: () -> (node :ast_expr) [

			/*
			 * Note that START and END can appear embedded within a list
			 * of atoms. Whether that makes the regex inherently unmatchable
			 * depends on whether the surrounding context is nullable or not,
			 * so that's detected after parsing has finished.
			 */

			atom: () -> (e :ast_expr) = {
				START;
				e = <ast-make-anchor-start>;
			||
				END;
				e = <ast-make-anchor-end>;
			||
				ANY;
				a = <class-any>;
				e = <ast-make-named>(a);
			||
				e = literal;
			||
				e = character-class;
			||
				e = type;
			||
				e = flags;
			||
				OPENSUB;
				flags = <ast-get-re-flags>();
				e = expr;
				<ast-set-re-flags>(flags);
				CLOSE;
			||
				OPENCAPTURE;
				flags = <ast-get-re-flags>();
				g = expr;
				<ast-set-re-flags>(flags);
				e = <ast-make-group>(g);
				CLOSE;
			##
				<err-expected-atom>;
				e = <ast-make-empty>;
			};

			count: () -> (c :ast_count) = {
				STAR;
				c = <count-zero-or-more>;
			||
				PLUS;
				c = <count-one-or-more>;
			||
				OPT;
				c = <count-zero-or-one>;
			||
				(start, !) = OPENCOUNT;
				m = COUNT;
				(!, end) = CLOSECOUNT;
				<mark-count>(start, end);
				c = <count-range>(m, start, m, end);
			||
				(start, !) = OPENCOUNT;
				m = COUNT;
				SEP;
				n = COUNT;
				(!, end) = CLOSECOUNT;
				<mark-count>(start, end);
				c = <count-range>(m, start, n, end);
			||
				(start, !) = OPENCOUNT;
				m = COUNT;
				SEP;
				(!, end) = CLOSECOUNT;
				<mark-count>(start, end);
				n = <count-unbounded>;
				c = <count-range>(m, start, n, end);
			##
				<err-expected-count>;
				c = <count-one>;
			};

			list-of-counts: (e :ast_expr) -> (node :ast_expr) = {
				c = count;
				node = <ast-make-piece>(e, c);

				{
					&node = list-of-counts(node);
				||
					$;
				};
			};

		] = {
			e = atom;
			{
				node = list-of-counts(e);
			||
				/* TODO: can this move into the count production? */
				c = <count-one>;
				node = <ast-make-piece>(e, c);
			};
		};

		list-of-pieces: (cat :ast_expr) -> () = {
			a = piece;
			<ast-add-concat>(cat, a);

			{
				list-of-pieces(cat);
			||
				$;
			};
		};

		alt: () -> (node :ast_expr) = {
			node = <ast-make-concat>;
			list-of-pieces(node);
		||
			/* explcitly allow an empty alt */
			node = <ast-make-empty>;
		};

		list-of-alts: (alts :ast_expr) -> () = {
			a = alt;

			<ast-add-alt>(alts, a);

			{
				ALT;

				list-of-alts(alts);
			||
				$;
			};
		##
			<err-expected-alts>;
		};

	] = {
		node = <ast-make-alt>;
		list-of-alts(node);
	##
		<err-expected-alts>;
		node = <ast-make-empty>;
	};

	re_pcre: () -> (node :ast_expr) = {
		{
			node = expr;
		};

		{
			EOF;
		##
			<err-expected-eof>;
		};
	};

%entry%

	re_pcre;

