#
# Copyright 2008-2017 Katherine Flavel
#
# See LICENCE for the full copyright terms.
#

'(?:'  -> $opensub;
'('  -> $opencapture;
')'  -> $close;

# predicates
'^'  -> $start;
'$'  -> $end;

# operators
'?'  -> $opt;
'*'  -> $star;
'+'  -> $plus;
'.'  -> $any;
'|'  -> $alt;

# standard escapes
'\\' -> $esc;
'\^' -> $esc;
'\$' -> $esc;
'\?' -> $esc;
'\*' -> $esc;
'\+' -> $esc;
'\.' -> $esc;
'\|' -> $esc;
'\(' -> $esc; '\)' -> $esc;
'\{' -> $esc; # note no \}
'\[' -> $esc; # note no \]

# whitespace escapes
'\f' -> $esc;
'\n' -> $esc;
'\r' -> $esc;
'\t' -> $esc;

# perl/unix-ish escapes
'\a' -> $esc;
'\c' /./ -> $control;

# character type escapes
# Note, this needs a double underscore because sid expects any '_'
# in a C identifier converts to "__".
'\d' -> $named__class;
'\D' -> $named__class;
'\h' -> $named__class;
'\H' -> $named__class;
'\s' -> $named__class;
'\S' -> $named__class;
'\v' -> $named__class;
'\V' -> $named__class;
'\w' -> $named__class;
'\W' -> $named__class;
# This break the uppercase/lowercase symmetry; conceptually, it's the
# negation of `.`, which matches everything except `\n`.
'\N' -> $named__class;

'\'   /[0-7]{2,3}/     -> $oct;

# PCRE treats \0 ... \7 as back references outside of a character class
#
# It's actually more complicated than that.  \<digits> is treated as a
# backref as long as there are _already_ that many capture groups in the
# expression.  Given that back references are unsupported, this seems
# like a overkill for a seldom-used feature.  However, it's nice to
# indicate that the usual backrefs aren't supported.
'\'   /[0-7]/          -> $unsupported;

# the new and proper way for back references
'\g' -> $unsupported;

# Yet another way to indicate back references
'\k' -> $unsupported;

# Resets current captured text.  Not _yet_ supported.
'\K' -> $unsupported;

'\o{' /[0-7]+/i '}'    -> $oct;
'\x'  /[0-9a-f]{0,2}/i -> $hex;
'\x{' /[0-9a-f]+/i '}' -> $hex;

'\' /./ - ($esc | $control | $oct | $hex | '\Q' | $named__class | $unsupported) -> $noesc;
'\' -> $invalid;

'(?' -> $openflags .. ')' -> $closeflags {
	'-' -> $negate;
	'i' -> $flag__insensitive;
	/[a-z]/ - $flag__insensitive -> $flag__unknown;
}

'[' -> $opengroup .. ']' -> $closegroup {
	'^' -> $invert;
	'-' -> $range;

	# extension escapes
	'\\' -> $esc;
	'\^' -> $esc;
	'\-' -> $esc;

	# whitespace escapes
	'\f' -> $esc;
	'\n' -> $esc;
	'\r' -> $esc;
	'\t' -> $esc;

	# perl/unix-ish escapes
	'\a' -> $esc;
	'\c' /./ -> $control;

	# other metacharacters that can be escaped within square brackets
	# for consistency's sake, although it isn't strictly necessary
	'\$' -> $esc;
	'\.' -> $esc;
	'\[' -> $esc;
	'\|' -> $esc;
	'\(' -> $esc;
	'\?' -> $esc;
	'\*' -> $esc;
	'\+' -> $esc;
	'\{' -> $esc;

	'\d' -> $named__class;
	'\D' -> $named__class;
	'\h' -> $named__class;
	'\H' -> $named__class;
	'\s' -> $named__class;
	'\S' -> $named__class;
	'\v' -> $named__class;
	'\V' -> $named__class;
	'\w' -> $named__class;
	'\W' -> $named__class;
	'\N' -> $named__class;

	'\'   /[0-7]{1,3}/     -> $oct;
	'\o{' /[0-7]+/i '}'    -> $oct;
	'\x'  /[0-9a-f]{1,2}/i -> $hex;
	'\x{' /[0-9a-f]+/i '}' -> $hex;

	'\' /./ - ($esc | $control | $oct | $hex | '\Q' | $named__class) -> $noesc;
	'\' -> $invalid;

	# FIXME: negated character classes, e.g. [:^alpha:]
	'[:alnum:]'  -> $named__class;
	'[:alpha:]'  -> $named__class;
	'[:ascii:]'  -> $named__class;
	'[:blank:]'  -> $named__class;
	'[:cntrl:]'  -> $named__class;
	'[:digit:]'  -> $named__class;
	'[:graph:]'  -> $named__class;
	'[:lower:]'  -> $named__class;
	'[:print:]'  -> $named__class;
	'[:punct:]'  -> $named__class;
	'[:space:]'  -> $named__class;
	'[:upper:]'  -> $named__class;
	'[:word:]'   -> $named__class;
	'[:xdigit:]' -> $named__class;

	# XXX: /./ - the above
	/[^\^\-\\\x00]/ -> $char;

	'\Q' .. '\E' {
		/./ - "\x00" -> $char;
	}
}

'[^' -> $opengroupinv .. ']' -> $closegroup {
	'^' -> $invert;
	'-' -> $range;

	# extension escapes
	'\\' -> $esc;
	'\^' -> $esc;
	'\-' -> $esc;

	# whitespace escapes
	'\f' -> $esc;
	'\n' -> $esc;
	'\r' -> $esc;
	'\t' -> $esc;

	# perl/unix-ish escapes
	'\a' -> $esc;
	'\c' /./ -> $control;

	# other metacharacters that can be escaped within square brackets
	# for consistency's sake, although it isn't strictly necessary
	'\$' -> $esc;
	'\.' -> $esc;
	'\[' -> $esc;
	'\|' -> $esc;
	'\(' -> $esc;
	'\?' -> $esc;
	'\*' -> $esc;
	'\+' -> $esc;
	'\{' -> $esc;

	'\d' -> $named__class;
	'\D' -> $named__class;
	'\h' -> $named__class;
	'\H' -> $named__class;
	'\s' -> $named__class;
	'\S' -> $named__class;
	'\v' -> $named__class;
	'\V' -> $named__class;
	'\w' -> $named__class;
	'\W' -> $named__class;
	'\N' -> $named__class;

	'\'   /[0-7]{1,3}/     -> $oct;
	'\o{' /[0-7]+/i '}'    -> $oct;
	'\x'  /[0-9a-f]{1,2}/i -> $hex;
	'\x{' /[0-9a-f]+/i '}' -> $hex;

	'\' /./ - ($esc | $control | $oct | $hex | '\Q' | $named__class) -> $noesc;
	'\' -> $invalid;

	# FIXME: negated character classes, e.g. [:^alpha:]
	'[:alnum:]'  -> $named__class;
	'[:alpha:]'  -> $named__class;
	'[:ascii:]'  -> $named__class;
	'[:blank:]'  -> $named__class;
	'[:cntrl:]'  -> $named__class;
	'[:digit:]'  -> $named__class;
	'[:graph:]'  -> $named__class;
	'[:lower:]'  -> $named__class;
	'[:print:]'  -> $named__class;
	'[:punct:]'  -> $named__class;
	'[:space:]'  -> $named__class;
	'[:upper:]'  -> $named__class;
	'[:word:]'   -> $named__class;
	'[:xdigit:]' -> $named__class;

	# XXX: /./ - the above
	/[^\^\-\\]/ -> $char;

	'\Q' .. '\E' {
		/./ -> $char;
	}
}

'[]' -> $opengroupcb .. ']' -> $closegroup {
	'^' -> $invert;
	'-' -> $range;

	# extension escapes
	'\\' -> $esc;
	'\^' -> $esc;
	'\-' -> $esc;

	# whitespace escapes
	'\f' -> $esc;
	'\n' -> $esc;
	'\r' -> $esc;
	'\t' -> $esc;

	# perl/unix-ish escapes
	'\a' -> $esc;
	'\c' /./ -> $control;

	# other metacharacters that can be escaped within square brackets
	# for consistency's sake, although it isn't strictly necessary
	'\$' -> $esc;
	'\.' -> $esc;
	'\[' -> $esc;
	'\|' -> $esc;
	'\(' -> $esc;
	'\?' -> $esc;
	'\*' -> $esc;
	'\+' -> $esc;
	'\{' -> $esc;

	'\d' -> $named__class;
	'\D' -> $named__class;
	'\h' -> $named__class;
	'\H' -> $named__class;
	'\s' -> $named__class;
	'\S' -> $named__class;
	'\v' -> $named__class;
	'\V' -> $named__class;
	'\w' -> $named__class;
	'\W' -> $named__class;
	'\N' -> $named__class;

	'\'   /[0-7]{1,3}/     -> $oct;
	'\o{' /[0-7]+/i '}'    -> $oct;
	'\x'  /[0-9a-f]{1,2}/i -> $hex;
	'\x{' /[0-9a-f]+/i '}' -> $hex;

	'\' /./ - ($esc | $control | $oct | $hex | '\Q' | $named__class) -> $noesc;
	'\' -> $invalid;

	# FIXME: negated character classes, e.g. [:^alpha:]
	'[:alnum:]'  -> $named__class;
	'[:alpha:]'  -> $named__class;
	'[:ascii:]'  -> $named__class;
	'[:blank:]'  -> $named__class;
	'[:cntrl:]'  -> $named__class;
	'[:digit:]'  -> $named__class;
	'[:graph:]'  -> $named__class;
	'[:lower:]'  -> $named__class;
	'[:print:]'  -> $named__class;
	'[:punct:]'  -> $named__class;
	'[:space:]'  -> $named__class;
	'[:upper:]'  -> $named__class;
	'[:word:]'   -> $named__class;
	'[:xdigit:]' -> $named__class;

	# XXX: /./ - the above
	/[^\^\-\\]/ -> $char;

	'\Q' .. '\E' {
		/./ -> $char;
	}
}

'[^]' -> $opengroupinvcb .. ']' -> $closegroup {
	'^' -> $invert;
	'-' -> $range;

	# extension escapes
	'\\' -> $esc;
	'\^' -> $esc;
	'\-' -> $esc;

	# whitespace escapes
	'\f' -> $esc;
	'\n' -> $esc;
	'\r' -> $esc;
	'\t' -> $esc;

	# perl/unix-ish escapes
	'\a' -> $esc;
	'\c' /./ -> $control;

	# other metacharacters that can be escaped within square brackets
	# for consistency's sake, although it isn't strictly necessary
	'\$' -> $esc;
	'\.' -> $esc;
	'\[' -> $esc;
	'\|' -> $esc;
	'\(' -> $esc;
	'\?' -> $esc;
	'\*' -> $esc;
	'\+' -> $esc;
	'\{' -> $esc;

	'\d' -> $named__class;
	'\D' -> $named__class;
	'\h' -> $named__class;
	'\H' -> $named__class;
	'\s' -> $named__class;
	'\S' -> $named__class;
	'\v' -> $named__class;
	'\V' -> $named__class;
	'\w' -> $named__class;
	'\W' -> $named__class;
	'\N' -> $named__class;

	'\'   /[0-7]{1,3}/     -> $oct;
	'\o{' /[0-7]+/i '}'    -> $oct;
	'\x'  /[0-9a-f]{1,2}/i -> $hex;
	'\x{' /[0-9a-f]+/i '}' -> $hex;

	'\' /./ - ($esc | $control | $oct | $hex | '\Q' | $named__class) -> $noesc;
	'\' -> $invalid;

	# FIXME: negated character classes, e.g. [:^alpha:]
	'[:alnum:]'  -> $named__class;
	'[:alpha:]'  -> $named__class;
	'[:ascii:]'  -> $named__class;
	'[:blank:]'  -> $named__class;
	'[:cntrl:]'  -> $named__class;
	'[:digit:]'  -> $named__class;
	'[:graph:]'  -> $named__class;
	'[:lower:]'  -> $named__class;
	'[:print:]'  -> $named__class;
	'[:punct:]'  -> $named__class;
	'[:space:]'  -> $named__class;
	'[:upper:]'  -> $named__class;
	'[:word:]'   -> $named__class;
	'[:xdigit:]' -> $named__class;

	# XXX: /./ - the above
	/[^\^\-\\]/ -> $char;

	'\Q' .. '\E' {
		/./ -> $char;
	}
}

'{' -> $opencount .. '}' -> $closecount {
	','      -> $sep;
	/[0-9]+/ -> $count;
}

'\Q' .. '\E' {
	/./ - "\x00" -> $char;
}

/./ - ($opensub | $opencapture | $close | $start | $end
	| $opt | $star | $plus | $any | $alt
	| $esc | $oct | $hex | $invalid
	| $opengroup | $opencount | "\x00") -> $char;

