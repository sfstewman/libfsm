/*
 * Copyright 2008-2017 Katherine Flavel
 *
 * See LICENCE for the full copyright terms.
 */

/* TODO: this shouldn't exit(); implement panic mode instead */

%prefixes%

	terminal = TOK_;
	function = p_;

%persistents%

	fsm :fsm;
	lex_state :lex_state;
	act_state :act_state;

%maps%

	char   -> char;
	string -> string;
	state  -> state;

%header% @{

	#include <assert.h>
	#include <string.h>
	#include <stdlib.h>
	#include <stdarg.h>
	#include <stdio.h>
	#include <errno.h>

	#include <fsm/fsm.h>

	#include <adt/xalloc.h>
	#include <adt/hmap.h>

	#include "libfsm/internal.h"	/* XXX */

	#include "lexer.h"
	#include "parser.h"

	typedef char *             string;
	typedef struct fsm_state * state;

        /* default number of buckets for the idmap */
        enum { NBUCKETS = 1024 };
	static int debug_hmap = 0;
	struct act_state {
		int lex_tok;
		int lex_tok_save;
                struct hmap *idmap;
		struct act_statelist *sl;
	};

	struct lex_state {
		struct lx lx;
		struct lx_dynbuf buf;
	};

	struct act_statelist {
		char *id;
		struct fsm_state *state;
		struct act_statelist *next;
	};

	#define CURRENT_TERMINAL (act_state->lex_tok)
	#define ERROR_TERMINAL   TOK_UNKNOWN
	#define ADVANCE_LEXER    do { act_state->lex_tok = lx_next(&lex_state->lx); } while (0)
	#define SAVE_LEXER(tok)  do { act_state->lex_tok_save = act_state->lex_tok; \
	                              act_state->lex_tok = tok;                     } while (0)
	#define RESTORE_LEXER    do { act_state->lex_tok = act_state->lex_tok_save; } while (0)

	static void
	err(const struct lex_state *lex_state, const char *fmt, ...)
	{
		va_list ap;

		assert(lex_state != NULL);

		va_start(ap, fmt);
		fprintf(stderr, "%u:%u: ",
			lex_state->lx.start.line, lex_state->lx.start.col);
		vfprintf(stderr, fmt, ap);
		fprintf(stderr, "\n");
		va_end(ap);
	}

	static void
	err_expected(const struct lex_state *lex_state, const char *token)
	{
		err(lex_state, "Syntax error: expected %s", token);
		exit(EXIT_FAILURE);
	}

@}, @{

	typedef struct lex_state * lex_state;
	typedef struct act_state * act_state;
	typedef struct fsm *       fsm;

	struct fsm *
	fsm_parse(FILE *f, const struct fsm_options *opt);

@};

%terminals%

	ESC: () -> (c :char) = @{
		assert(0 == strncmp(lex_state->buf.a, "\\", 1));
		assert(2 == strlen(lex_state->buf.a));

		@c = lex_state->buf.a[1];

		switch (@c) {
		case '\\': @c = '\\'; break;
		case '\'': @c = '\''; break;
		case 'f':  @c = '\f'; break;
		case 'n':  @c = '\n'; break;
		case 'r':  @c = '\r'; break;
		case 't':  @c = '\t'; break;
		case 'v':  @c = '\v'; break;
		default:              break;
		}
	@};

	OCT: () -> (c :char) = @{
		unsigned long u;
		char *e;

		assert(0 == strncmp(lex_state->buf.a, "\\", 1));
		assert(strlen(lex_state->buf.a) >= 2);

		errno = 0;

		u = strtoul(lex_state->buf.a + 1, &e, 8);
		assert(*e == '\0');

		if ((u == ULONG_MAX && errno == ERANGE) || u > UCHAR_MAX) {
			err(lex_state, "octal escape %s out of range: expected \\0..\\%o inclusive",
				lex_state->buf.a, UCHAR_MAX);
			exit(EXIT_FAILURE);
		}

		if ((u == ULONG_MAX && errno != 0) || *e != '\0') {
			err(lex_state, "%s: %s: expected \\0..\\%o inclusive",
				lex_state->buf.a, strerror(errno), UCHAR_MAX);
			exit(EXIT_FAILURE);
		}

		@c = (char) (unsigned char) u;
	@};

	HEX: () -> (c :char) = @{
		unsigned long u;
		char *e;

		assert(0 == strncmp(lex_state->buf.a, "\\x", 2));
		assert(strlen(lex_state->buf.a) >= 3);

		errno = 0;

		u = strtoul(lex_state->buf.a + 2, &e, 16);
		assert(*e == '\0');

		if ((u == ULONG_MAX && errno == ERANGE) || u > UCHAR_MAX) {
			err(lex_state, "hex escape %s out of range: expected \\x0..\\x%x inclusive",
				lex_state->buf.a, UCHAR_MAX);
			exit(EXIT_FAILURE);
		}

		if ((u == ULONG_MAX && errno != 0) || *e != '\0') {
			err(lex_state, "%s: %s: expected \\x0..\\x%x inclusive",
				lex_state->buf.a, strerror(errno), UCHAR_MAX);
			exit(EXIT_FAILURE);
		}

		@c = (char) (unsigned char) u;
	@};

	CHAR: () -> (c :char) = @{
		assert(lex_state->buf.a[0] != '\0');
		assert(lex_state->buf.a[1] == '\0');

		@c = lex_state->buf.a[0];
	@};

	IDENT: () -> (s :string) = @{
		@s = xstrdup(lex_state->buf.a);
		if (@s == NULL) {
			perror("xstrdup");
			exit(EXIT_FAILURE);
		}
	@};

%actions%

	<add-state>: (n :string) -> (s :state) = @{
		struct act_statelist *p;

		assert(@n != NULL);

                /*
		for (p = act_state->sl; p != NULL; p = p->next) {
			assert(p->id != NULL);
			assert(p->state != NULL);

			if (0 == strcmp(p->id, @n)) {
				@s = p->state;
				break;
			}
		}
                */
                p = hmap_getptr(act_state->idmap, @n);

                if (debug_hmap) {
			struct act_statelist *p0 = p;

			for (p = act_state->sl; p != NULL; p = p->next) {
				assert(p->id != NULL);
				assert(p->state != NULL);

				if (0 == strcmp(p->id, @n)) {
					@s = p->state;
					break;
				}
			}
			assert(p == p0);
		}

		if (p == NULL) {
			struct act_statelist *new;

			new = malloc(sizeof *new);
			if (new == NULL) {
				perror("malloc");
				exit(EXIT_FAILURE);
			}

			new->id = xstrdup(@n);
			if (new->id == NULL) {
				perror("xstrdup");
				exit(EXIT_FAILURE);
			}

			@s = fsm_addstate(fsm);
			if (@s == NULL) {
				perror("fsm_addstate");
				exit(EXIT_FAILURE);
			}

			new->state = @s;

			new->next = act_state->sl;
			act_state->sl = new;
                        hmap_setptr(act_state->idmap, new->id, new);
		} else {
                        @s = p->state;
                }
	@};

	<mark-start>: (s :state) -> () = @{
		assert(@s != NULL);

		fsm_setstart(fsm, @s);
	@};

	<mark-end>: (s :state) -> () = @{
		assert(@s != NULL);

		fsm_setend(fsm, @s, 1);
	@};

	<free>: (s :string) -> () = @{
		free(@s);
	@};

	<free-statelist> = @{
		struct act_statelist *p;
		struct act_statelist *next;

		for (p = act_state->sl; p != NULL; p = next) {
			next = p->next;

			assert(p->id != NULL);

			free(p->id);
			free(p);
		}
	@};

	<add-edge-literal>: (x :state, y :state, c :char) -> () = @{
		if (!fsm_addedge_literal(fsm, @x, @y, @c)) {
			perror("fsm_addedge_literal");
			exit(EXIT_FAILURE);
		}
	@};

	<add-edge-any>: (x :state, y :state) -> () = @{
		if (!fsm_addedge_any(fsm, @x, @y)) {
			perror("fsm_addedge_any");
			exit(EXIT_FAILURE);
		}
	@};

	<add-edge-epsilon>: (x :state, y :state) -> () = @{
		if (!fsm_addedge_epsilon(fsm, @x, @y)) {
			perror("fsm_addedge_epsilon");
			exit(EXIT_FAILURE);
		}
	@};


	<err-expected-sep> = @{
		err_expected(lex_state, "';'");
	@};

	<err-expected-trans> = @{
		err_expected(lex_state, "transition");
	@};

	<err-expected-comma> = @{
		err_expected(lex_state, "','");
	@};

	<err-expected-start> = @{
		err_expected(lex_state, "'start:'");
	@};

	<err-expected-end> = @{
		err_expected(lex_state, "'end:'");
	@};

	<err-syntax> = @{
		err(lex_state, "Syntax error");
		exit(EXIT_FAILURE);
	@};

%trailer% @{

	struct fsm *fsm_parse(FILE *f, const struct fsm_options *opt) {
		struct act_state act_state_s;
		struct act_state *act_state;
		struct lex_state lex_state_s;
		struct lex_state *lex_state;
		struct fsm *new;
		struct lx *lx;

		assert(f != NULL);
		assert(opt != NULL);

		lex_state = &lex_state_s;

		lx = &lex_state->lx;

		lx_init(lx);

		lx->lgetc  = lx_fgetc;
		lx->opaque = f;

		lex_state->buf.a   = NULL;
		lex_state->buf.len = 0;

		lx->buf   = &lex_state->buf;
		lx->push  = lx_dynpush;
		lx->pop   = lx_dynpop;
		lx->clear = lx_dynclear;
		lx->free  = lx_dynfree;

		act_state_s.sl = NULL;
                act_state_s.idmap = hmap_create_string(NBUCKETS, 0.6f);

		/* This is a workaround for ADVANCE_LEXER assuming a pointer */
		act_state = &act_state_s;

		/* TODO: pass in fsm_options */
		new = fsm_new(opt);
		if (new == NULL) {
			perror("fsm_new");
			return NULL;
		}

		ADVANCE_LEXER; /* XXX: what if the first token is unrecognised? */
		p_fsm(new, lex_state, act_state);

                hmap_free(act_state_s.idmap);
		lx->free(lx);

		return new;
	}

@}, @{
@};

